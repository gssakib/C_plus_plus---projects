// This program utilizes Jensen Model to estimate wake radius(r), wake velocity inside turbine(v) and power generated by turbine.

//defining library
#include <iostream>
#include <string>
#include <math.h>

using namespace std;


class turbine
{

private:
	double r_o ; //rotor radius 
	double a ; //axial induction factor
	double u; //incoming wind speed
	const double alpha = 0.1; //setting entrainment constant
	double x; // downwind distance from turbine
	double rho = 1.225; //air density 
	double PI = acos(-1); //definition of PI
public:
	turbine(): r_o(0), a(0) {/*default constructor*/}
	turbine(double m, double n, double o, double p) : r_o(m), a(n), u(o), x(p) {/*regular constructor */};
	
	//member function for showing the parameters for a specific turbine
	void show() {
		cout << "Rotor radius(r_o) = " << r_o << endl;
		cout << "Axial induction factor(a) = " << a << endl;
		cout << "Incoming wind speed(u) = " << u << endl;
		cout << "Setting entrainment constant(alpha) = " << alpha << endl;
		cout << "Downard distance from turbine(x) = " << x << endl;
		cout << "Air density(rho) = " <<rho << endl;
		cout << "PI = " <<PI<< endl;
	}

	//member fucntion to calculate the wake velocity behind the turbine
	double wake_vel_behind() {

		return ((1 - 2 * a)*u);

	}

	//member function to calculate wake radius
	double wake_radius() {

		return (r_o + alpha*x);

	}

	//member function to calculate wake velocity inside turbine
	double wake_velocity_in(double r) {

		return (u*(1 - 2 * a*pow((r_o / r), 2)));

	}

	//member function to calculate power generated from each of the turbine
	double power() {
		double c_p = 4.0 *a*pow((1 - a),  2); //power coefficient
		return 0.5*c_p*rho*PI*pow(r_o, 2)*pow(u, 3); //power equation

	}

	
};


int main() {
	//defining the variables to help instantiate turbine class
	double u = 0;//incoming wind speed
	double a = 0; //axial induction factor
	double r_o = 0 ; //rotor radius 
	double x = 0; // downwind distance from turbine

	//introducing the program
	cout << "This OOP program utilizes Jensen Model to estimate wake radius(r), wake velocity inside turbine(v) and power generated by turbine" << endl;
	cout << "Please input the following parameters in meteric units" << endl << endl;
	
	//asking for parameters for turbine
	cout << "Enter Incoming wind speed (u): "; cin >> u;
	cout << "Enter Axial induction factor (a): "; cin >> a;
	cout << "Enter Rotor radius (r_o): "; cin >> r_o;
	cout << "Enter Downwind distance from turbine (x): ";  cin >> x;
	cout << endl;
	
	//instantiating turbine 1
	turbine t1(r_o,a,u,x);

	//instantiating turbine 2
	turbine t2(r_o, a, t1.wake_velocity_in(t1.wake_radius()), x);

	//outputting the results
	cout << "Power of Turbine 1: " << t1.power() << " W";
	cout << endl;
	cout << "Power of Turbine 2: " << t2.power() << " W";
	cout << endl << endl;
	system("pause");




}